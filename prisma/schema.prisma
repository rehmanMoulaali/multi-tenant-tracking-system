// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization{
  id Int @id @default(autoincrement())
  name String 
  domain String
  address String
  city String
  state String
  country String
  pincode String
  contactName String
  contactPhone String
  contactEmail String
  contactDesignation String
  contactDepartment String
  organizationStatus OrganizationStatus @default(INACTIVE)
  roles     Roles[]
  user User[]   // One-to-many relationship with Roles model
  vehicles Vehicle[]
  routes Route[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([domain,pincode])
}

model Features {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  api_path    String
  action      Action
  roles       RoleFeatures[]   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([api_path,action])
}

model Roles {
  id             Int        @id @default(autoincrement())
  name           String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  organizationId Int        // Foreign key to Organization model
  organization   Organization @relation(fields: [organizationId], references: [id])
  features       RoleFeatures[]
  user User[] 
}

model RoleFeatures {
  roleId      Int
  role        Roles     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  featureId   Int
  feature     Features  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  @@id([roleId, featureId])
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique 
  password String
  userName String @unique
  organizationId Int        // Foreign key to Organization model
  organization   Organization @relation(fields: [organizationId], references: [id])
  roleId Int 
  roles Roles @relation(fields: [roleId],references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Vehicle{
  id Int @id @default(autoincrement())
  device_id String 
  name String
  longitude Decimal @default(0.0)
  latitude Decimal @default(0.0)
  organizationId Int  
  organization   Organization @relation(fields: [organizationId], references: [id])
  locationData LocationData[]
  heatbeat DateTime @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Route{
  id Int @id @default(autoincrement())
  routeId String
  name String
  routeType RouteTypes
  routeCoordinates RouteCoordinate[]
  organizationId Int  
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RouteCoordinate{
  id Int @id @default(autoincrement())
  order Int
  lonlongitude Decimal @default(0.0)
  latitude Decimal @default(0.0)
  routeId Int
  route Route @relation(fields: [routeId],references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LocationData{
  id Int @id @default(autoincrement())
  longitude Decimal @default(0.0)
  latitude Decimal @default(0.0)
  vehicleId Int
  vehicle Vehicle @relation(fields: [vehicleId],references: [id])
}
enum Action{
  GET
  POST 
  PUT 
  DELETE
  PATCH
}

enum RouteTypes{
  UNI_DIRCTIONAL
  BI_DIRECTIONAL_SAME_STOPS
  BI_DIRECTIONAL_DIFFERENT_STOPS
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
}